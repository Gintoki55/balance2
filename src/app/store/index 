import { createSlice } from "@reduxjs/toolkit";
import { StationValueData } from "../(stations)/msf/(data)/msfData";
// import { toast } from "react-hot-toast";

// ─── Thunks كما عندك تماماً ─────────────────────────────

// 🧮 تشغيل الحسابات

// 📁 جلب الملفات المحفوظة

// 💾 حفظ المشروع

// 📂 تحميل بيانات ملف محدد

// 📊 جلب جميع Dashboards

// 💾 حفظ أو تحديث Dashboard



// ─── الحالة الأساسية والـ reducers ────────────────────────────

const initialState = {
  selectedFile: "",
  selectedScenario: "Design",
  stationData: StationValueData,
  savedFiles: [],
  loadingFiles: false,
  error: null,
  dashboards: [],
  dashboardSaveLoading: false,
  loadingDashboard:true,
};

export const msfSlice = createSlice({
  name: "msf",
  initialState,
  reducers: {
    setSelectedFile: (state, action) => {
      state.selectedFile = action.payload;
    },
    setSelectedScenario: (state, action) => {
      state.selectedScenario = action.payload;
      if (state.stationData.length > 0 && state.stationData[0].length > 0) {
        state.stationData[0][0].value = action.payload;
      }
    },
    setStationData: (state, action) => {
      state.stationData = action.payload;
    },

    resetStation: (state) => {
      state.selectedFile = "New Plant";
      state.selectedScenario = "Design";
      state.stationData = StationValueData.map((row) =>
        row.map((cell) => {
          if (cell.key === "Jb") return { ...cell, value: 1 };
          if (cell.key === "Jc") return { ...cell, value: 1 };
          return cell;
        })
      );
    },

    updateCellValue: (state, action) => {
      const { cellKey, value } = action.payload;
      state.stationData = state.stationData.map((row) =>
        row.map((cell) => (cell.key === cellKey ? { ...cell, value } : cell))
      );
    },
  },

  extraReducers: (builder) => {
    builder
      .addCase(fetchSavedFiles.pending, (state) => {
        state.loadingFiles = true;
      })
      .addCase(fetchSavedFiles.fulfilled, (state, action) => {
        state.loadingFiles = false;
        state.savedFiles = action.payload;
      })
      .addCase(fetchSavedFiles.rejected, (state, action) => {
        state.loadingFiles = false;
        state.error = action.payload;
      })


      .addCase(saveProject.fulfilled, (state, action) => {
        if (!state.savedFiles.includes(action.payload)) {
          state.savedFiles.push(action.payload);
        }    
      })


      .addCase(fetchDashboards.pending, (state) => {
        state.loadingDashboard = true;
      })
      .addCase(fetchDashboards.fulfilled, (state, action) => {
        state.loadingDashboard = false;
        state.dashboards = action.payload;
      })
      .addCase(fetchDashboards.rejected, (state) => {
        state.loadingDashboard = false;
      })


      .addCase(saveDashboard.pending, (state) => {
        state.dashboardSaveLoading = true;
      })
      .addCase(saveDashboard.fulfilled, (state, action) => {
        state.dashboardSaveLoading = false;
        if (!state.dashboards.includes(action.payload)) {
          state.dashboards.push(action.payload);
        }
      })
      .addCase(saveDashboard.rejected, (state) => {
        state.dashboardSaveLoading = false;
      });

  },
});

export const {
  setSelectedFile,
  setSelectedScenario,
  setStationData,
  resetStation,
  updateCellValue,
} = msfSlice.actions;

export default msfSlice.reducer;